"""
Django settings for advance_practice project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
env_path = BASE_DIR.parent / '.env'
load_dotenv(dotenv_path=env_path)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-a@b9f6h&u-1ihqds7*82#v%2xn7a9a46lc19(8e4u(_8$^5_#k'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'debug_toolbar',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'django_filters',
    'django_celery_beat',
    'User',
    'Catalog',
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # Move to end
]

ROOT_URLCONF = 'advance_practice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'core' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'advance_practice.wsgi.application'

AUTH_USER_MODEL = 'User.User'

# CORS Headers settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "authorization",
    "content-type",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('NAME'),
        'USER': os.environ.get('USER'),
        'PASSWORD': os.environ.get('PASSWORD'),
        'HOST': os.environ.get('HOST'),
        'PORT': os.environ.get('PORT'),
    }
}

INTERNAL_IPS = [
    '127.0.0.1',
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Additional locations of static files
STATICFILES_DIRS = [
    BASE_DIR / 'core' / 'static',
]

# Media files (User uploaded files)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Django Advance Practice API',
    'DESCRIPTION': '''
    Comprehensive API documentation for Django Advance Practice project.
    
    Features:
    - User Authentication (JWT)
    - Category Management (Tree Structure)
    - Product Management (Multiple Images, Views Tracking)
    - Comments System
    - Vouchers Management
    - Analytics & Reports
    
    Authentication:
    1. Register or Login to get JWT access token
    2. Click "Authorize" button (top right)
    3. Enter: Bearer <your_access_token>
    4. All authenticated endpoints will work
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    'COMPONENT_SPLIT_REQUEST': True,
    'SORT_OPERATIONS': False,
    'SCHEMA_PATH_PREFIX': r'/api/',
    'SERVERS': [
        {'url': 'http://127.0.0.1:8000', 'description': 'Local Development Server'},
    ],
    'TAGS': [
        {'name': 'Authentication', 'description': 'User registration, login, logout and token management'},
        {'name': 'User Profile', 'description': 'User profile and password management'},
        {'name': 'User Management', 'description': 'User administration (Admin only)'},
        {'name': 'Categories', 'description': 'Category CRUD operations with tree structure support'},
        {'name': 'Products', 'description': 'Product management with images and tracking'},
        {'name': 'Product Images', 'description': 'Product image management'},
        {'name': 'Comments', 'description': 'Product comments and reviews'},
        {'name': 'Vouchers', 'description': 'User vouchers management'},
        {'name': 'Reports', 'description': 'Analytics and statistics reports'},
    ],
    'APPEND_COMPONENTS': {
        'securitySchemes': {
            'jwtAuth': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
            }
        }
    },
    'SECURITY': [{'jwtAuth': []}],
}

# JWT settings
from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(hours=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

# --- Celery Configuration ---
from celery.schedules import crontab

# URL point to Redis broker
CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')

# URL point to Redis result backend
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND')

# Configuration for using django-celery-results
# CELERY_RESULT_BACKEND = 'django-db'

# Format for serializing task content
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Time zone
CELERY_TIMEZONE = 'Asia/Ho_Chi_Minh'

# Celery Beat Schedule - Periodic Tasks
CELERY_BEAT_SCHEDULE = {
    # Database health check - runs every 1 minute
    'db-health-check-every-minute': {
        'task': 'User.tasks.db_health_check',
        'schedule': 60.0,  # Run every 60 seconds (1 minute)
    },
    # Daily signup report - runs every day at 5:40 PM
    'daily-signup-report': {
        'task': 'User.tasks.signup_report',
        'schedule': crontab(hour=17, minute=40),  # Run at 5:40 PM every day
    },
}

# Configuration for using django-celery-results
# CELERY_RESULT_EXTENDED = True

# --- Email Configuration ---

# For development: emails will be printed to console
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# For production, use SMTP:
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')

# --- Django Debug Toolbar Configuration ---

def show_toolbar(request):
    """
    Custom callback to determine when to show debug toolbar.
    Only show for:
    - HTML requests (not API/JSON)
    - Requests from localhost/127.0.0.1
    """
    # Don't show for API requests (check if it's a JSON/REST API request)
    if request.path.startswith('/api/') or request.path.startswith('/catalog/api/'):
        return False
    
    # Don't show for AJAX requests
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return False
    
    # Don't show if Accept header prefers JSON
    accept = request.headers.get('Accept', '')
    if 'application/json' in accept and 'text/html' not in accept:
        return False
    
    # Show for local development
    return DEBUG and request.META.get('REMOTE_ADDR') in INTERNAL_IPS

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': 'advance_practice.settings.show_toolbar',
    # Don't show toolbar on these paths
    'SKIP_TEMPLATE_PREFIXES': (
        'admin/',
        'debug_toolbar/',
    ),
}
